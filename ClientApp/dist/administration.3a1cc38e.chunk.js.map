{"version":3,"file":"administration.3a1cc38e.chunk.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAGA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAYA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAUA;AAGA;AAEA;;;;;;;;;;;;;;;;;AC1IA;AAEA;AAEA;AAEA;AAYA;;;;;;;;;;;;;;;;;AClBA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAQA;AAEA;AAEA;AAGA;AACA;AAKA;;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AAIA;AAQA;AAWA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;AC7GA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AAKA;AAKA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;;AAIA;AACA;AAGA;AACA;AAEA;AAQA;AAIA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AAOA;AAOA;AAOA;AAcA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AAWA;AAEA;AAKA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAKA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAUA;AAUA;AAeA;AAQA;AASA;AASA;AAEA;AACA;AAYA;AAEA;AACA;AAaA;AAEA;;;;;;;;;;;;;;;;;;;;;;AClKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAKA;AAKA;AAEA;AAOA;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAOA;AACA;AACA;;AAEA;AAEA;AACA;;AAEA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AAMA;AAMA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAUA;AACA;AAIA;AACA;AACA;AAIA;AAUA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAKA;AACA;AAAA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;ACzIA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAOA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAKA;AAUA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AAQA;AAWA;AAYA;AAMA;;AAEA;AACA;;AAIA;AAKA;;AAEA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AC/OA;AACA;AACA;AACA;AAUA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAOA;AAMA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AASA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAKA;AACA;;AAEA;AAKA;AACA;;AAEA;AAOA;AACA;;AAEA;AAKA;AACA;;AAEA;AAKA;AACA;;AAEA;AAMA;AACA;;AAEA;AAKA;AACA;;AAGA;AAgBA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AAOA;AAkBA;AAEA","sources":["webpack://falak-tyb/./src/app/modules/administration/docs/docs.scss","webpack://falak-tyb/./src/app/modules/administration/docs/docs.scss?8299","webpack://falak-tyb/./src/app/modules/administration/configuration/configuration.tsx","webpack://falak-tyb/./src/app/modules/administration/docs/docs.tsx","webpack://falak-tyb/./src/app/modules/administration/health/health-modal.tsx","webpack://falak-tyb/./src/app/modules/administration/health/health.tsx","webpack://falak-tyb/./src/app/modules/administration/index.tsx","webpack://falak-tyb/./src/app/modules/administration/logs/logs.tsx","webpack://falak-tyb/./src/app/modules/administration/metrics/metrics.tsx","webpack://falak-tyb/./src/app/modules/administration/user-management/index.tsx","webpack://falak-tyb/./src/app/modules/administration/user-management/user-management-delete-dialog.tsx","webpack://falak-tyb/./src/app/modules/administration/user-management/user-management-detail.tsx","webpack://falak-tyb/./src/app/modules/administration/user-management/user-management-update.tsx","webpack://falak-tyb/./src/app/modules/administration/user-management/user-management.tsx"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"iframe {\\n  background: white;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/modules/administration/docs/docs.scss\"],\"names\":[],\"mappings\":\"AAAA;EACE,iBAAA;AACF\",\"sourcesContent\":[\"iframe {\\n  background: white;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../../../../../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../../../../../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../../../../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../../../../../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../../../../../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../../../../../node_modules/css-loader/dist/cjs.js!../../../../../node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!../../../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[3]!./docs.scss\";\n       export default content && content.locals ? content.locals : undefined;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Input, Row, Col, Badge } from \"reactstrap\";\nimport { Translate } from \"react-jhipster\";\n\nimport { getConfigurations, getEnv } from \"../administration.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const ConfigurationPage = () => {\n  const [filter, setFilter] = useState(\"\");\n  const [reversePrefix, setReversePrefix] = useState(false);\n  const [reverseProperties, setReverseProperties] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const configuration = useAppSelector(\n    (state) => state.administration.configuration\n  );\n\n  useEffect(() => {\n    dispatch(getConfigurations());\n    dispatch(getEnv());\n  }, []);\n\n  const changeFilter = (evt) => setFilter(evt.target.value);\n\n  const envFilterFn = (configProp) =>\n    configProp.toUpperCase().includes(filter.toUpperCase());\n\n  const propsFilterFn = (configProp) =>\n    configProp.prefix.toUpperCase().includes(filter.toUpperCase());\n\n  const changeReversePrefix = () => setReversePrefix(!reversePrefix);\n\n  const changeReverseProperties = () =>\n    setReverseProperties(!reverseProperties);\n\n  const getContextList = (contexts) =>\n    Object.values(contexts)\n      .map((v: any) => v.beans)\n      .reduce((acc, e) => ({ ...acc, ...e }));\n\n  const configProps = configuration?.configProps ?? {};\n\n  const env = configuration?.env ?? {};\n\n  return (\n    <div>\n      <h2 id=\"configuration-page-heading\" data-cy=\"configurationPageHeading\">\n        <Translate contentKey=\"configuration.title\">Configuration</Translate>\n      </h2>\n      <span>\n        <Translate contentKey=\"configuration.filter\">Filter</Translate>\n      </span>{\" \"}\n      <Input\n        type=\"search\"\n        value={filter}\n        onChange={changeFilter}\n        name=\"search\"\n        id=\"search\"\n      />\n      <label>Spring configuration</label>\n      <Table className=\"table table-striped table-bordered table-responsive d-table\">\n        <thead>\n          <tr>\n            <th onClick={changeReversePrefix}>\n              <Translate contentKey=\"configuration.table.prefix\">\n                Prefix\n              </Translate>\n            </th>\n            <th onClick={changeReverseProperties}>\n              <Translate contentKey=\"configuration.table.properties\">\n                Properties\n              </Translate>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {configProps.contexts\n            ? Object.values(getContextList(configProps.contexts))\n                .filter(propsFilterFn)\n                .map((property: any, propIndex) => (\n                  <tr key={propIndex}>\n                    <td>{property[\"prefix\"]}</td>\n                    <td>\n                      {Object.keys(property[\"properties\"]).map(\n                        (propKey, index) => (\n                          <Row key={index}>\n                            <Col md=\"4\">{propKey}</Col>\n                            <Col md=\"8\">\n                              <Badge className=\"float-end bg-secondary break\">\n                                {JSON.stringify(\n                                  property[\"properties\"][propKey]\n                                )}\n                              </Badge>\n                            </Col>\n                          </Row>\n                        )\n                      )}\n                    </td>\n                  </tr>\n                ))\n            : null}\n        </tbody>\n      </Table>\n      {env.propertySources\n        ? env.propertySources.map((envKey, envIndex) => (\n            <div key={envIndex}>\n              <h4>\n                <span>{envKey.name}</span>\n              </h4>\n              <Table className=\"table table-sm table-striped table-bordered table-responsive d-table\">\n                <thead>\n                  <tr key={envIndex}>\n                    <th className=\"w-40\">Property</th>\n                    <th className=\"w-60\">Value</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {Object.keys(envKey.properties)\n                    .filter(envFilterFn)\n                    .map((propKey, propIndex) => (\n                      <tr key={propIndex}>\n                        <td className=\"break\">{propKey}</td>\n                        <td className=\"break\">\n                          <span className=\"float-end badge bg-secondary break\">\n                            {envKey.properties[propKey].value}\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                </tbody>\n              </Table>\n            </div>\n          ))\n        : null}\n    </div>\n  );\n};\n\nexport default ConfigurationPage;\n","import \"./docs.scss\";\n\nimport React from \"react\";\n\nconst DocsPage = () => (\n  <div>\n    <iframe\n      src=\"../swagger-ui/index.html\"\n      width=\"100%\"\n      height=\"800\"\n      title=\"Swagger UI\"\n      seamless\n      style={{ border: \"none\" }}\n      data-cy=\"swagger-frame\"\n    />\n  </div>\n);\n\nexport default DocsPage;\n","import React from \"react\";\nimport {\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n} from \"reactstrap\";\n\nconst formatDiskSpaceOutput = (rawValue) => {\n  // Should display storage space in an human readable unit\n  const val = rawValue / 1073741824;\n  if (val > 1) {\n    // Value\n    return val.toFixed(2) + \" GB\";\n  }\n  return (rawValue / 1048576).toFixed(2) + \" MB\";\n};\n\nconst HealthModal = ({ handleClose, healthObject, showModal }) => {\n  const data = healthObject.details || {};\n  return (\n    <Modal\n      isOpen={showModal}\n      modalTransition={{ timeout: 20 }}\n      backdropTransition={{ timeout: 10 }}\n      toggle={handleClose}\n    >\n      <ModalHeader toggle={handleClose}>{healthObject.name}</ModalHeader>\n      <ModalBody>\n        <Table bordered>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Value</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((key, index) => (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>\n                  {healthObject.name === \"diskSpace\"\n                    ? formatDiskSpaceOutput(data[key])\n                    : JSON.stringify(data[key])}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"primary\" onClick={handleClose}>\n          Close\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default HealthModal;\n","import React, { useState, useEffect } from \"react\";\nimport { Translate } from \"react-jhipster\";\nimport { Table, Badge, Col, Row, Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\nimport HealthModal from \"./health-modal\";\nimport { getSystemHealth } from \"../administration.reducer\";\n\nexport const HealthPage = () => {\n  const [healthObject, setHealthObject] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const health = useAppSelector((state) => state.administration.health);\n  const isFetching = useAppSelector((state) => state.administration.loading);\n\n  useEffect(() => {\n    dispatch(getSystemHealth());\n  }, []);\n\n  const fetchSystemHealth = () => {\n    if (!isFetching) {\n      dispatch(getSystemHealth());\n    }\n  };\n\n  const getSystemHealthInfo = (name, healthObj) => () => {\n    setShowModal(true);\n    setHealthObject({ ...healthObj, name });\n  };\n\n  const getBadgeType = (status: string) =>\n    status !== \"UP\" ? \"danger\" : \"success\";\n\n  const handleClose = () => setShowModal(false);\n\n  const renderModal = () => (\n    <HealthModal\n      healthObject={healthObject}\n      handleClose={handleClose}\n      showModal={showModal}\n    />\n  );\n\n  const data = (health || {}).components || {};\n\n  return (\n    <div>\n      <h2 id=\"health-page-heading\" data-cy=\"healthPageHeading\">\n        Health Checks\n      </h2>\n      <p>\n        <Button\n          onClick={fetchSystemHealth}\n          color={isFetching ? \"btn btn-danger\" : \"btn btn-primary\"}\n          disabled={isFetching}\n        >\n          <FontAwesomeIcon icon=\"sync\" />\n          &nbsp;\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\n            Refresh\n          </Translate>\n        </Button>\n      </p>\n      <Row>\n        <Col md=\"12\">\n          <Table bordered aria-describedby=\"health-page-heading\">\n            <thead>\n              <tr>\n                <th>Service Name</th>\n                <th>Status</th>\n                <th>Details</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.keys(data).map((configPropKey, configPropIndex) =>\n                configPropKey !== \"status\" ? (\n                  <tr key={configPropIndex}>\n                    <td>{configPropKey}</td>\n                    <td>\n                      <Badge color={getBadgeType(data[configPropKey].status)}>\n                        {data[configPropKey].status}\n                      </Badge>\n                    </td>\n                    <td>\n                      {data[configPropKey].details ? (\n                        <a\n                          onClick={getSystemHealthInfo(\n                            configPropKey,\n                            data[configPropKey]\n                          )}\n                        >\n                          <FontAwesomeIcon icon=\"eye\" />\n                        </a>\n                      ) : null}\n                    </td>\n                  </tr>\n                ) : null\n              )}\n            </tbody>\n          </Table>\n        </Col>\n      </Row>\n      {renderModal()}\n    </div>\n  );\n};\n\nexport default HealthPage;\n","import React from \"react\";\n\nimport ErrorBoundaryRoute from \"app/shared/error/error-boundary-route\";\nimport UserManagement from \"./user-management\";\nimport Logs from \"./logs/logs\";\nimport Health from \"./health/health\";\nimport Metrics from \"./metrics/metrics\";\nimport Configuration from \"./configuration/configuration\";\nimport Docs from \"./docs/docs\";\n\nconst Routes = ({ match }) => (\n  <div>\n    <ErrorBoundaryRoute\n      path={`${match.url}/user-management`}\n      component={UserManagement}\n    />\n    <ErrorBoundaryRoute exact path={`${match.url}/health`} component={Health} />\n    <ErrorBoundaryRoute\n      exact\n      path={`${match.url}/metrics`}\n      component={Metrics}\n    />\n    <ErrorBoundaryRoute\n      exact\n      path={`${match.url}/configuration`}\n      component={Configuration}\n    />\n    <ErrorBoundaryRoute exact path={`${match.url}/logs`} component={Logs} />\n    <ErrorBoundaryRoute exact path={`${match.url}/docs`} component={Docs} />\n  </div>\n);\n\nexport default Routes;\n","import React, { useState, useEffect } from \"react\";\nimport { Translate } from \"react-jhipster\";\n\nimport { getLoggers, changeLogLevel } from \"../administration.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const LogsPage = () => {\n  const [filter, setFilter] = useState(\"\");\n  const logs = useAppSelector((state) => state.administration.logs);\n  const isFetching = useAppSelector((state) => state.administration.loading);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getLoggers());\n  }, []);\n\n  const changeLevel = (loggerName, level) => () =>\n    dispatch(changeLogLevel(loggerName, level));\n\n  const changeFilter = (evt) => setFilter(evt.target.value);\n\n  const getClassName = (level, check, className) =>\n    level === check ? `btn btn-sm btn-${className}` : \"btn btn-sm btn-light\";\n\n  const filterFn = (l) => l.name.toUpperCase().includes(filter.toUpperCase());\n\n  const loggers = logs\n    ? Object.entries(logs.loggers).map((e: any) => ({\n        name: e[0],\n        level: e[1].effectiveLevel,\n      }))\n    : [];\n\n  return (\n    <div>\n      <h2 id=\"logs-page-heading\" data-cy=\"logsPageHeading\">\n        <Translate contentKey=\"logs.title\">Logs</Translate>\n      </h2>\n      <p>\n        <Translate\n          contentKey=\"logs.nbloggers\"\n          interpolate={{ total: loggers.length }}\n        >\n          There are {loggers.length.toString()} loggers.\n        </Translate>\n      </p>\n\n      <span>\n        <Translate contentKey=\"logs.filter\">Filter</Translate>\n      </span>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={changeFilter}\n        className=\"form-control\"\n        disabled={isFetching}\n      />\n\n      <table\n        className=\"table table-sm table-striped table-bordered\"\n        aria-describedby=\"logs-page-heading\"\n      >\n        <thead>\n          <tr title=\"click to order\">\n            <th>\n              <span>\n                <Translate contentKey=\"logs.table.name\">Name</Translate>\n              </span>\n            </th>\n            <th>\n              <span>\n                <Translate contentKey=\"logs.table.level\">Level</Translate>\n              </span>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {loggers.filter(filterFn).map((logger, i) => (\n            <tr key={`log-row-${i}`}>\n              <td>\n                <small>{logger.name}</small>\n              </td>\n              <td>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"TRACE\")}\n                  className={getClassName(logger.level, \"TRACE\", \"primary\")}\n                >\n                  TRACE\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"DEBUG\")}\n                  className={getClassName(logger.level, \"DEBUG\", \"success\")}\n                >\n                  DEBUG\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"INFO\")}\n                  className={getClassName(logger.level, \"INFO\", \"info\")}\n                >\n                  INFO\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"WARN\")}\n                  className={getClassName(logger.level, \"WARN\", \"warning\")}\n                >\n                  WARN\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"ERROR\")}\n                  className={getClassName(logger.level, \"ERROR\", \"danger\")}\n                >\n                  ERROR\n                </button>\n                <button\n                  disabled={isFetching}\n                  onClick={changeLevel(logger.name, \"OFF\")}\n                  className={getClassName(logger.level, \"OFF\", \"secondary\")}\n                >\n                  OFF\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default LogsPage;\n","import React, { useEffect } from \"react\";\nimport { Button, Col, Row } from \"reactstrap\";\nimport {\n  CacheMetrics,\n  DatasourceMetrics,\n  GarbageCollectorMetrics,\n  HttpRequestMetrics,\n  JvmMemory,\n  JvmThreads,\n  EndpointsRequestsMetrics,\n  SystemMetrics,\n  Translate,\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport {\n  APP_TIMESTAMP_FORMAT,\n  APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT,\n  APP_WHOLE_NUMBER_FORMAT,\n} from \"app/config/constants\";\nimport {\n  getSystemMetrics,\n  getSystemThreadDump,\n} from \"../administration.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const MetricsPage = () => {\n  const dispatch = useAppDispatch();\n  const metrics = useAppSelector((state) => state.administration.metrics);\n  const isFetching = useAppSelector((state) => state.administration.loading);\n  const threadDump = useAppSelector((state) => state.administration.threadDump);\n\n  useEffect(() => {\n    dispatch(getSystemMetrics());\n    dispatch(getSystemThreadDump());\n  }, []);\n\n  const getMetrics = () => {\n    if (!isFetching) {\n      dispatch(getSystemMetrics());\n      dispatch(getSystemThreadDump());\n    }\n  };\n\n  return (\n    <div>\n      <h2 id=\"metrics-page-heading\" data-cy=\"metricsPageHeading\">\n        Application Metrics\n      </h2>\n      <p>\n        <Button\n          onClick={getMetrics}\n          color={isFetching ? \"btn btn-danger\" : \"btn btn-primary\"}\n          disabled={isFetching}\n        >\n          <FontAwesomeIcon icon=\"sync\" />\n          &nbsp;\n          <Translate component=\"span\" contentKey=\"health.refresh.button\">\n            Refresh\n          </Translate>\n        </Button>\n      </p>\n      <hr />\n\n      <Row>\n        <Col sm=\"12\">\n          <h3>JVM Metrics</h3>\n          <Row>\n            <Col md=\"4\">\n              {metrics?.jvm ? (\n                <JvmMemory\n                  jvmMetrics={metrics.jvm}\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n                />\n              ) : (\n                \"\"\n              )}\n            </Col>\n            <Col md=\"4\">\n              {threadDump ? (\n                <JvmThreads\n                  jvmThreads={threadDump}\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n                />\n              ) : (\n                \"\"\n              )}\n            </Col>\n            <Col md=\"4\">\n              {metrics?.processMetrics ? (\n                <SystemMetrics\n                  systemMetrics={metrics.processMetrics}\n                  wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n                  timestampFormat={APP_TIMESTAMP_FORMAT}\n                />\n              ) : (\n                \"\"\n              )}\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n\n      {metrics?.garbageCollector ? (\n        <GarbageCollectorMetrics\n          garbageCollectorMetrics={metrics.garbageCollector}\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n        />\n      ) : (\n        \"\"\n      )}\n      {metrics && metrics[\"http.server.requests\"] ? (\n        <HttpRequestMetrics\n          requestMetrics={metrics[\"http.server.requests\"]}\n          twoDigitAfterPointFormat={APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT}\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n        />\n      ) : (\n        \"\"\n      )}\n      {metrics?.services ? (\n        <EndpointsRequestsMetrics\n          endpointsRequestsMetrics={metrics.services}\n          wholeNumberFormat={APP_WHOLE_NUMBER_FORMAT}\n        />\n      ) : (\n        \"\"\n      )}\n\n      {metrics?.cache ? (\n        <Row>\n          <Col sm=\"12\">\n            <CacheMetrics\n              cacheMetrics={metrics.cache}\n              twoDigitAfterPointFormat={\n                APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT\n              }\n            />\n          </Col>\n        </Row>\n      ) : (\n        \"\"\n      )}\n\n      {metrics?.databases && JSON.stringify(metrics.databases) !== \"{}\" ? (\n        <Row>\n          <Col sm=\"12\">\n            <DatasourceMetrics\n              datasourceMetrics={metrics.databases}\n              twoDigitAfterPointFormat={\n                APP_TWO_DIGITS_AFTER_POINT_NUMBER_FORMAT\n              }\n            />\n          </Col>\n        </Row>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default MetricsPage;\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport ErrorBoundaryRoute from \"app/shared/error/error-boundary-route\";\nimport UserManagement from \"./user-management\";\nimport UserManagementDetail from \"./user-management-detail\";\nimport UserManagementUpdate from \"./user-management-update\";\nimport UserManagementDeleteDialog from \"./user-management-delete-dialog\";\n\nconst Routes = ({ match }) => (\n  <>\n    <Switch>\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/new`}\n        component={UserManagementUpdate}\n      />\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/:login/edit`}\n        component={UserManagementUpdate}\n      />\n      <ErrorBoundaryRoute\n        exact\n        path={`${match.url}/:login`}\n        component={UserManagementDetail}\n      />\n      <ErrorBoundaryRoute path={match.url} component={UserManagement} />\n    </Switch>\n    <ErrorBoundaryRoute\n      path={`${match.url}/:login/delete`}\n      component={UserManagementDeleteDialog}\n    />\n  </>\n);\n\nexport default Routes;\n","import React, { useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\nimport { Translate } from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { getUser, deleteUser } from \"./user-management.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const UserManagementDeleteDialog = (\n  props: RouteComponentProps<{ login: string }>\n) => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getUser(props.match.params.login));\n  }, []);\n\n  const handleClose = (event) => {\n    event.stopPropagation();\n    props.history.push(\"/admin/user-management\");\n  };\n\n  const user = useAppSelector((state) => state.userManagement.user);\n\n  const confirmDelete = (event) => {\n    dispatch(deleteUser(user.login));\n    handleClose(event);\n  };\n\n  return (\n    <Modal isOpen toggle={handleClose}>\n      <ModalHeader toggle={handleClose}>\n        <Translate contentKey=\"entity.delete.title\">\n          Confirm delete operation\n        </Translate>\n      </ModalHeader>\n      <ModalBody>\n        <Translate\n          contentKey=\"userManagement.delete.question\"\n          interpolate={{ login: user.login }}\n        >\n          Are you sure you want to delete this User?\n        </Translate>\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={handleClose}>\n          <FontAwesomeIcon icon=\"ban\" />\n          &nbsp;\n          <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n        </Button>\n        <Button color=\"danger\" onClick={confirmDelete}>\n          <FontAwesomeIcon icon=\"trash\" />\n          &nbsp;\n          <Translate contentKey=\"entity.action.delete\">Delete</Translate>\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default UserManagementDeleteDialog;\n","import React, { useEffect } from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Row, Badge } from \"reactstrap\";\nimport { Translate, TextFormat } from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { APP_DATE_FORMAT } from \"app/config/constants\";\nimport { languages } from \"app/config/translation\";\nimport { getUser } from \"./user-management.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const UserManagementDetail = (\n  props: RouteComponentProps<{ login: string }>\n) => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getUser(props.match.params.login));\n  }, []);\n\n  const user = useAppSelector((state) => state.userManagement.user);\n\n  return (\n    <div>\n      <h2>\n        <Translate contentKey=\"userManagement.detail.title\">User</Translate> [\n        <strong>{user.login}</strong>]\n      </h2>\n      <Row size=\"md\">\n        <dl className=\"jh-entity-details\">\n          <dt>\n            <Translate contentKey=\"userManagement.login\">Login</Translate>\n          </dt>\n          <dd>\n            <span>{user.login}</span>&nbsp;\n            {user.activated ? (\n              <Badge color=\"success\">\n                <Translate contentKey=\"userManagement.activated\">\n                  Activated\n                </Translate>\n              </Badge>\n            ) : (\n              <Badge color=\"danger\">\n                <Translate contentKey=\"userManagement.deactivated\">\n                  Deactivated\n                </Translate>\n              </Badge>\n            )}\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.firstName\">\n              First Name\n            </Translate>\n          </dt>\n          <dd>{user.firstName}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastName\">\n              Last Name\n            </Translate>\n          </dt>\n          <dd>{user.lastName}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.email\">Email</Translate>\n          </dt>\n          <dd>{user.email}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.langKey\">Lang Key</Translate>\n          </dt>\n          <dd>{user.langKey ? languages[user.langKey].name : undefined}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.createdBy\">\n              Created By\n            </Translate>\n          </dt>\n          <dd>{user.createdBy}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.createdDate\">\n              Created Date\n            </Translate>\n          </dt>\n          <dd>\n            {user.createdDate ? (\n              <TextFormat\n                value={user.createdDate}\n                type=\"date\"\n                format={APP_DATE_FORMAT}\n                blankOnInvalid\n              />\n            ) : null}\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastModifiedBy\">\n              Last Modified By\n            </Translate>\n          </dt>\n          <dd>{user.lastModifiedBy}</dd>\n          <dt>\n            <Translate contentKey=\"userManagement.lastModifiedDate\">\n              Last Modified Date\n            </Translate>\n          </dt>\n          <dd>\n            {user.lastModifiedDate ? (\n              <TextFormat\n                value={user.lastModifiedDate}\n                type=\"date\"\n                format={APP_DATE_FORMAT}\n                blankOnInvalid\n              />\n            ) : null}\n          </dd>\n          <dt>\n            <Translate contentKey=\"userManagement.profiles\">Profiles</Translate>\n          </dt>\n          <dd>\n            <ul className=\"list-unstyled\">\n              {user.authorities\n                ? user.authorities.map((authority, i) => (\n                    <li key={`user-auth-${i}`}>\n                      <Badge color=\"info\">{authority}</Badge>\n                    </li>\n                  ))\n                : null}\n            </ul>\n          </dd>\n        </dl>\n      </Row>\n      <Button tag={Link} to=\"/admin/user-management\" replace color=\"info\">\n        <FontAwesomeIcon icon=\"arrow-left\" />{\" \"}\n        <span className=\"d-none d-md-inline\">\n          <Translate contentKey=\"entity.action.back\">Back</Translate>\n        </span>\n      </Button>\n    </div>\n  );\n};\n\nexport default UserManagementDetail;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Row, Col, FormText } from \"reactstrap\";\nimport {\n  Translate,\n  translate,\n  ValidatedField,\n  ValidatedForm,\n  isEmail,\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { locales, languages } from \"app/config/translation\";\nimport {\n  getUser,\n  getRoles,\n  updateUser,\n  createUser,\n  reset,\n} from \"./user-management.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const UserManagementUpdate = (\n  props: RouteComponentProps<{ login: string }>\n) => {\n  const [isNew] = useState(!props.match.params || !props.match.params.login);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (isNew) {\n      dispatch(reset());\n    } else {\n      dispatch(getUser(props.match.params.login));\n    }\n    dispatch(getRoles());\n    return () => {\n      dispatch(reset());\n    };\n  }, [props.match.params.login]);\n\n  const handleClose = () => {\n    props.history.push(\"/admin/user-management\");\n  };\n\n  const saveUser = (values) => {\n    if (isNew) {\n      dispatch(createUser(values));\n    } else {\n      dispatch(updateUser(values));\n    }\n    handleClose();\n  };\n\n  const isInvalid = false;\n  const user = useAppSelector((state) => state.userManagement.user);\n  const loading = useAppSelector((state) => state.userManagement.loading);\n  const updating = useAppSelector((state) => state.userManagement.updating);\n  const authorities = useAppSelector(\n    (state) => state.userManagement.authorities\n  );\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h1>\n            <Translate contentKey=\"userManagement.home.createOrEditLabel\">\n              Create or edit a User\n            </Translate>\n          </h1>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          {loading ? (\n            <p>Loading...</p>\n          ) : (\n            <ValidatedForm onSubmit={saveUser} defaultValues={user}>\n              {user.id ? (\n                <ValidatedField\n                  type=\"text\"\n                  name=\"id\"\n                  required\n                  readOnly\n                  label={translate(\"global.field.id\")}\n                  validate={{ required: true }}\n                />\n              ) : null}\n              <ValidatedField\n                type=\"text\"\n                name=\"login\"\n                label={translate(\"userManagement.login\")}\n                validate={{\n                  required: {\n                    value: true,\n                    message: translate(\n                      \"register.messages.validate.login.required\"\n                    ),\n                  },\n                  pattern: {\n                    value:\n                      /^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/,\n                    message: translate(\n                      \"register.messages.validate.login.pattern\"\n                    ),\n                  },\n                  minLength: {\n                    value: 1,\n                    message: translate(\n                      \"register.messages.validate.login.minlength\"\n                    ),\n                  },\n                  maxLength: {\n                    value: 50,\n                    message: translate(\n                      \"register.messages.validate.login.maxlength\"\n                    ),\n                  },\n                }}\n              />\n              <ValidatedField\n                type=\"text\"\n                name=\"firstName\"\n                label={translate(\"userManagement.firstName\")}\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    message: translate(\"entity.validation.maxlength\", {\n                      max: 50,\n                    }),\n                  },\n                }}\n              />\n              <ValidatedField\n                type=\"text\"\n                name=\"lastName\"\n                label={translate(\"userManagement.lastName\")}\n                validate={{\n                  maxLength: {\n                    value: 50,\n                    message: translate(\"entity.validation.maxlength\", {\n                      max: 50,\n                    }),\n                  },\n                }}\n              />\n              <FormText>\n                This field cannot be longer than 50 characters.\n              </FormText>\n              <ValidatedField\n                name=\"email\"\n                label={translate(\"global.form.email.label\")}\n                placeholder={translate(\"global.form.email.placeholder\")}\n                type=\"email\"\n                validate={{\n                  required: {\n                    value: true,\n                    message: translate(\n                      \"global.messages.validate.email.required\"\n                    ),\n                  },\n                  minLength: {\n                    value: 5,\n                    message: translate(\n                      \"global.messages.validate.email.minlength\"\n                    ),\n                  },\n                  maxLength: {\n                    value: 254,\n                    message: translate(\n                      \"global.messages.validate.email.maxlength\"\n                    ),\n                  },\n                  validate: (v) =>\n                    isEmail(v) ||\n                    translate(\"global.messages.validate.email.invalid\"),\n                }}\n              />\n              <ValidatedField\n                type=\"checkbox\"\n                name=\"activated\"\n                check\n                value={true}\n                disabled={!user.id}\n                label={translate(\"userManagement.activated\")}\n              />\n              <ValidatedField\n                type=\"select\"\n                name=\"langKey\"\n                label={translate(\"userManagement.langKey\")}\n              >\n                {locales.map((locale) => (\n                  <option value={locale} key={locale}>\n                    {languages[locale].name}\n                  </option>\n                ))}\n              </ValidatedField>\n              <ValidatedField\n                type=\"select\"\n                name=\"authorities\"\n                multiple\n                label={translate(\"userManagement.profiles\")}\n              >\n                {authorities.map((role) => (\n                  <option value={role} key={role}>\n                    {role}\n                  </option>\n                ))}\n              </ValidatedField>\n              <Button\n                tag={Link}\n                to=\"/admin/user-management\"\n                replace\n                color=\"info\"\n              >\n                <FontAwesomeIcon icon=\"arrow-left\" />\n                &nbsp;\n                <span className=\"d-none d-md-inline\">\n                  <Translate contentKey=\"entity.action.back\">Back</Translate>\n                </span>\n              </Button>\n              &nbsp;\n              <Button\n                color=\"primary\"\n                type=\"submit\"\n                disabled={isInvalid || updating}\n              >\n                <FontAwesomeIcon icon=\"save\" />\n                &nbsp;\n                <Translate contentKey=\"entity.action.save\">Save</Translate>\n              </Button>\n            </ValidatedForm>\n          )}\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default UserManagementUpdate;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, RouteComponentProps } from \"react-router-dom\";\nimport { Button, Table, Badge } from \"reactstrap\";\nimport {\n  Translate,\n  TextFormat,\n  JhiPagination,\n  JhiItemCount,\n  getSortState,\n} from \"react-jhipster\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { APP_DATE_FORMAT } from \"app/config/constants\";\nimport {\n  ASC,\n  DESC,\n  ITEMS_PER_PAGE,\n  SORT,\n} from \"app/shared/util/pagination.constants\";\nimport { overridePaginationStateWithQueryParams } from \"app/shared/util/entity-utils\";\nimport { getUsersAsAdmin, updateUser } from \"./user-management.reducer\";\nimport { useAppDispatch, useAppSelector } from \"app/config/store\";\n\nexport const UserManagement = (props: RouteComponentProps<any>) => {\n  const dispatch = useAppDispatch();\n\n  const [pagination, setPagination] = useState(\n    overridePaginationStateWithQueryParams(\n      getSortState(props.location, ITEMS_PER_PAGE, \"id\"),\n      props.location.search\n    )\n  );\n\n  const getUsersFromProps = () => {\n    dispatch(\n      getUsersAsAdmin({\n        page: pagination.activePage - 1,\n        size: pagination.itemsPerPage,\n        sort: `${pagination.sort},${pagination.order}`,\n      })\n    );\n    const endURL = `?page=${pagination.activePage}&sort=${pagination.sort},${pagination.order}`;\n    if (props.location.search !== endURL) {\n      props.history.push(`${props.location.pathname}${endURL}`);\n    }\n  };\n\n  useEffect(() => {\n    getUsersFromProps();\n  }, [pagination.activePage, pagination.order, pagination.sort]);\n\n  useEffect(() => {\n    const params = new URLSearchParams(props.location.search);\n    const page = params.get(\"page\");\n    const sortParam = params.get(SORT);\n    if (page && sortParam) {\n      const sortSplit = sortParam.split(\",\");\n      setPagination({\n        ...pagination,\n        activePage: +page,\n        sort: sortSplit[0],\n        order: sortSplit[1],\n      });\n    }\n  }, [props.location.search]);\n\n  const sort = (p) => () =>\n    setPagination({\n      ...pagination,\n      order: pagination.order === ASC ? DESC : ASC,\n      sort: p,\n    });\n\n  const handlePagination = (currentPage) =>\n    setPagination({\n      ...pagination,\n      activePage: currentPage,\n    });\n\n  const handleSyncList = () => {\n    getUsersFromProps();\n  };\n\n  const toggleActive = (user) => () => {\n    dispatch(\n      updateUser({\n        ...user,\n        activated: !user.activated,\n      })\n    );\n  };\n\n  const { match } = props;\n  const account = useAppSelector((state) => state.authentication.account);\n  const users = useAppSelector((state) => state.userManagement.users);\n  const totalItems = useAppSelector((state) => state.userManagement.totalItems);\n  const loading = useAppSelector((state) => state.userManagement.loading);\n\n  return (\n    <div className=\"px-4 sm:px-6 lg:px-8  flex justify-center  flex-col  container ml-8   \" style={{ width: \"78%\" }}>\n      <div className=\"sm:flex sm:items-center \">\n      <div className=\"mt-4 sm:mt-0 sm:flex-none\">\n          <Link to=\"/account/register\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-[#827349] px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-[#827349] focus:outline-none focus:ring-2 focus:ring-[#827349] focus:ring-offset-2 sm:w-auto\">\n            + اضافة حساب\n          </Link>\n        </div>\n        <div className=\"flex-1 flex items-center justify-center px-2  lg:justify-start\">\n          {/* <button\n            type=\"button\"\n            className=\"inline-flex items-center justify-center rounded-md border border-transparent bg-[#827349] px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-[#827349]focus:outline-none focus:ring-2 focus:ring-[#827349] focus:ring-offset-2 sm:w-auto\"\n          >\n            البحث\n          </button> */}\n         \n        </div>\n        <div className=\"sm:flex-auto text-right\">\n          <h1 className=\"text-xl font-semibold text-gray-900\"> الحسابات  </h1>\n\n        </div>\n\n      </div>\n      <div className=\" flex flex-col border-transparent shadow-md \" dir=\"rtl\" >\n        <div className=\"-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8\">\n          <div className=\"inline-block min-w-full py-2 align-middle md:px-6 lg:px-8\">\n            <div className=\"overflow-hidden shadow ring-1 ring-black ring-opacity-5 md:rounded-lg\">\n              <table className=\"min-w-full divide-y divide-gray-300\">\n                <thead className=\"bg-gray-50\">\n                  <tr>\n                  <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      اسم بالانجليزي                     \n                         <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n                    <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      اسم بالعربي                     \n                         <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n                    <th scope=\"col\" className=\"py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      اسم االمستخدم                     \n                         <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n            \n                    \n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      البريد الإلكتروني                    \n                          <span className=\"ml-2 flex-none rounded bg-gray-200 text-gray-900 group-hover:bg-gray-300\">\n\n                        </span>\n                      </a>\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      اللغة\n                        <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                      <a href=\"#\" className=\"group inline-flex\">\nنوع الحساب \n                        <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                      <a href=\"#\" className=\"group inline-flex\">\n رقم الوظيفي\n                        <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n                    <th scope=\"col\" className=\"px-3 py-3.5 text-left text-sm font-semibold text-gray-900\">\n                      <a href=\"#\" className=\"group inline-flex\">\n                      تاريخ الإنشاء                      \n                      \n                        <span className=\"invisible ml-2 flex-none rounded text-gray-400 group-hover:visible group-focus:visible\">\n\n                        </span>\n                      </a>\n                    </th>\n                   \n\n\n\n                  \n\n\n\n                 \n                  </tr>\n                </thead>\n                <tbody className=\"divide-y divide-gray-200 bg-white\">\n\n                  {users.map(user => {\n\n                    const creationDate = new Date(user.createdDate);\n\n                    const months = [\"يناير\", \"فبراير\", \"مارس\", \"إبريل\", \"مايو\", \"يونيو\",\n                      \"يوليو\", \"أغسطس\", \"سبتمبر\", \"أكتوبر\", \"نوفمبر\", \"ديسمبر\"\n                    ];\n                    const days = [\"اﻷحد\", \"اﻷثنين\", \"الثلاثاء\", \"اﻷربعاء\", \"الخميس\", \"الجمعة\", \"السبت\"];\n                    const creationDateString = days[creationDate.getDay()] + ', ' + creationDate.getDate() + ' ' + months[creationDate.getMonth()] + ', ' + creationDate.getFullYear();\n\n                    return (\n                      <tr key={`entity-${user.id}`} >\n  <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.firstName}</td>\n  \n  <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.lastName}</td>\n\n                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.login}</td>\n                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.email}</td>\n\n                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.langKey}</td>\n                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.authorities\n                  ? user.authorities.map((authority, j) => (\n                     \n                        <Badge key={j} color=\"info\">{authority}</Badge>\n                    \n                    ))\n                  : null}</td>\n                                          <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{user.emplyeeCard}</td>\n\n                        <td className=\"whitespace-nowrap px-3 py-4 text-sm text-gray-500\">{creationDateString}</td>\n                       \n\n \n                       \n                      </tr>\n                    )\n                  })\n                  }\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n\n\n\n\n\n    </div>\n  );\n};\n\nexport default UserManagement;\n"],"names":[],"sourceRoot":""}